#!/usr/bin/python -u

import sys
import logging
import json
from optparse import OptionParser

from nullunit.common import getConfig, getMCP

oparser = OptionParser( description='nullunit iterator' )

oparser.add_option( '-v', '--verbose', dest='verbose', default=False, action='store_true' )

# job contoll
oparser.add_option(       '--signal-ran', help='(job) Signal the job has been Run', dest='signal_ran', default=False, action='store_true' )

# query options
oparser.add_option( '-r', '--resource', help='(query) with resource name', dest='resource', default=None )
oparser.add_option( '-i', '--index', help='(query) query with resource index', dest='index', default=None, type='int' )
oparser.add_option( '-c', '--count', help='(query) count', dest='count', default=None, type='int' )

# status options
oparser.add_option(       '--are-configured', help='(status) exit 0 if configured exit 2 otherwise', dest='are_configured', default=False, action='store_true' )

# data options
#oparser.add_option(       '--config', help='(data) get plato config config', dest='config', default=False, action='store_true' )
#oparser.add_option(       '--device', help='(data) get plato device config', dest='device', default=False, action='store_true' )
oparser.add_option(       '--primary-ip', help='(data) print the primary ip', dest='primary_ip', default=False, action='store_true' )
oparser.add_option(       '--set-keyval', help='(data) set the config key to value, can be specified multiple times (ie: --set-keyval=mykey:myvalue), if value starts with { or [ it will be treated as JSON', dest='set_keyval', type='string', action='append' )
oparser.add_option(       '--get-keyval', help='(data) get value for config key', dest='get_keyval', type='string' )

# output option
#oparser.add_option( '-f', '--file', help='write output to file, otherwise will be sent to stdout (for data options).', dest='file' )

( options, args ) = oparser.parse_args()

logging.basicConfig()
logger = logging.getLogger()

if options.verbose:
  logger.setLevel( logging.DEBUG )

config = getConfig()
if not config:
  sys.exit( 1 )

mcp = getMCP( config )
if not mcp:
  sys.exit( 1 )

# job controll:
if options.signal_ran:
  mcp.signalJobRan()
  sys.exit( 0 )

# status options
if options.are_configured:
  if options.resource is None:
    print 'Resource Name is required'
    sys.exit( 1 )

  status_list = mcp.getConfigStatus( options.resource, options.index, options.count )
  result = True
  for item in status_list:
    if options.verbose:
      print '%s - %s' % ( item, status_list[ item ] )

    result &= ( status_list[ item ] == 'Configured' )

  if result:
    sys.exit( 0 )

  sys.exit( 2 )

if options.primary_ip or options.get_keyval:
  if options.resource is None:
    print 'Resource Name is required'
    sys.exit( 1 )

  config_map = mcp.getProvisioningInfo( options.resource, options.index, options.count )
  # we need to sort the results, they come down in a map
  config_list = []
  key_list = config_map.keys()
  key_list.sort( key=lambda x: int( x ) )
  for key in key_list:
    config_list.append( config_map[ key ] )

  if options.primary_ip:
    for config in config_list:
      print config[ 'address_provisioning' ][ 'address' ]

  else:
    for config in config_list:
      try:
        print config[ options.get_keyval ]
      except KeyError:
        print '<not found>'

  sys.exit( 0 )

if options.set_keyval:
  if options.resource is None:
    print 'Resource Name is required'
    sys.exit( 1 )

  values = {}
  for item in options.set_keyval:
    try:
      ( key, value ) = item.split( ':', 1 )
    except IndexError:
      print 'Error parsing item: "%s"' % item
      sys.exit( 1 )

    values[ key ] = value
    if values[ key ][0] in ( '[', '{' ):
      values[ key ] = json.loads( values[ key ] )

  if not mcp.setConfigValues( values, options.resource, options.index, options.count ):
    print 'Error setting config Values "%s"' % values
    sys.exit( 1 )

  sys.exit( 0 )

oparser.print_help()
sys.exit( 1 ) # not implememented from here out yet
# data options

if options.file:
  output = file( options.file, 'w' )
else:
  output = sys.stdout

data = {}

output.wirte( json.dumps( data ) )
sys.exit( 0 )
