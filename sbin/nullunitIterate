#!/usr/bin/python -u

import sys
import os
from optparse import OptionParser
import logging
import ConfigParser

from nullunit.common import getConfig, getMCP, getPackrat
from nullunit.iterate import readState, writeState, doStep
from nullunit.procutils import open_output

PID_FILE = '/var/run/nullunitIterate.pid'
STATE_FILE = '/var/lib/nullunitIterate.state'

oparser = OptionParser( description='nullunit iterator' )

oparser.add_option( '-v', '--verbose', dest='verbose', default=False, action='store_true' )

( options, args ) = oparser.parse_args()

if os.path.exists( PID_FILE ):
  print 'pid file exists, bailing...'
  sys.exit( 0 )

tmp = open( PID_FILE, 'w' )
tmp.write( '%s\n' % os.getpid() )
tmp.close()

logging.basicConfig()
logger = logging.getLogger()

if options.verbose:
  logger.setLevel( logging.DEBUG )

config = getConfig()
if not config:
  os.unlink( PID_FILE )
  sys.exit( 1 )

mcp = getMCP( config )
if not mcp:
  os.unlink( PID_FILE )
  sys.exit( 1 )

packrat = getPackrat( config )
if not packrat:
  os.unlink( PID_FILE )
  sys.exit( 1 )

try:
  state = readState( STATE_FILE )
except ConfigParser.Error as e:
  print 'Error retreiving git url, git branch, and/or make target from config file'
  os.unlink( PID_FILE )
  sys.exit( 1 )

if state is None:
  state = {
            'state': 'clone',
            'url': config.get( 'git', 'url' ),
            'branch': config.get( 'git', 'branch' ),
            'target': config.get( 'make', 'target' ),
            'requires': config.get( 'make', 'requires' )
         }

if state[ 'state' ] in ( 'done', 'failed' ):
  mcp.sendStatus( 'Ran' )
  logging.info( 'nullunit: done' )
  os.unlink( PID_FILE )
  sys.exit( 0 )

open_output( '/tmp/nullunit_debug.%s.log' % os.getpid() )

try:
  doStep( state, mcp, packrat )
except Exception as e:
  logging.exception( 'nullunit: Exception in doStep for "%s".' % state[ 'state' ] )
  mcp.sendStatus( 'Exception "%s"' % e )
  sys.exit( 1 )

writeState( STATE_FILE, state )

os.unlink( PID_FILE )
sys.exit( 0 )
